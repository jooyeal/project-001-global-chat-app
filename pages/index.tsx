import type { InferGetServerSidePropsType } from "next";
import InfiniteScroll from "react-infinite-scroll-component";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import Post from "../components/pages/home/Post";
import { useAppDispatch, useAppSelector } from "../hooks/storeHook";
import { userRequest } from "../service/baseApi";
import { getPostByPage } from "../service/postsApi";
import { fetchSuccess, postsClear } from "../store/slices/postsSlice";
import { FadeLoader } from "react-spinners";
import styles from "../styles/pages/Home.module.css";
import PostingModal from "../components/pages/home/PostingModal";

export const getServerSideProps = async (ctx: any) => {
  try {
    const res = await userRequest(ctx.req.cookies?.token).get(
      "http://localhost:8000/api/post/page/1"
    );
    const data = res.data;
    return {
      props: {
        data,
      },
    };
  } catch (err: any) {
    const {
      response: {
        data: { errorCode },
      },
    } = err;
    if (errorCode === 101 || errorCode === 100) {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }
    return {
      props: {
        data: { errorCode },
      },
    };
  }
};

const Home = ({
  data,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const selector = useAppSelector((state) => state.posts);
  const dispatch = useAppDispatch();
  const [currentPage, setCurrentPage] = useState(2);
  const [postingOpen, setPostingOpen] = useState(false);
  const [scrollInitVisible, setScrollInitVisible] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null!);
  useEffect(() => {
    dispatch(postsClear());
    if (!data?.errorCode) dispatch(fetchSuccess(data));
  }, []);

  const fetchPosts = () => {
    setTimeout(() => {
      dispatch(getPostByPage(currentPage));
      setCurrentPage(currentPage + 1);
    }, 1000);
  };

  const postingModalOpen = () => {
    setPostingOpen(true);
  };

  const postingModalClose = () => {
    setPostingOpen(false);
  };

  const onClickScrollInit = () => {
    scrollRef.current?.scrollTo({ top: 0, behavior: "smooth" });
  };

  const onScrollInfiniteScroll = (e: any) => {
    if (e.target.scrollTop > 100) {
      setScrollInitVisible(true);
    } else {
      setScrollInitVisible(false);
    }
  };

  return (
    <div
      ref={scrollRef}
      onScroll={onScrollInfiniteScroll}
      id="scrollableDiv"
      className={styles.container}
    >
      <Head>
        <title>미정</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <PostingModal open={postingOpen} close={postingModalClose} />
      <InfiniteScroll
        className={styles.infiniteScroll}
        dataLength={selector.posts?.length}
        next={fetchPosts}
        hasMore={!selector.isLast}
        loader={
          <FadeLoader
            loading={true}
            color="#e0e0e0"
            css="margin: 0 auto;"
            height={10}
            width={2.5}
          />
        }
        scrollableTarget="scrollableDiv"
      >
        <div className={styles.posting} onClick={postingModalOpen}>
          ADD NEW POST
        </div>
        {scrollInitVisible && (
          <div className={styles.scrollInit} onClick={onClickScrollInit}>
            TO THE TOP
          </div>
        )}
        {selector.posts?.map((post: any, index) => (
          <Post key={index} userName={post.userName} desc={post.desc} />
        ))}
      </InfiniteScroll>
    </div>
  );
};

export default Home;
